//Procedure dot_product

PROCEDURE dot_product(v1,v2: ARRAY_OF INTEGER, VAR dot : INTEGER)
VAR
    i : INTEGER;
BEGIN
    dot :=0;
    i :=0;
    IF (v1.length <> v2.length) THEN
    Write("Vectors with different sizes we cannot calculate dot product");
    dot := NaN ;

    WHILE (i < v1.length) DO 
    dot := dot + v1[i]*v2[i];
    END_WHILE
END


//algorithm

ALGORITHM orth_vectors
VAR
    v1,v2 : ARRAY_OF INTEGER [50];
    dot : INTEGER;
BEGIN
//Read size of element of v1
    n1 := read_size();
//Read elements of v1
    read_array(n1,v1);
//Read size of element of v2
    n2 := read_size();
//Read element of v2
    read_array(n2,v2);
dot_product(v1,v2,dot);
IF (dot = 0) THEN
Write("v1 and v2 are orthogonal");
ELSE 
Write("v1 and v2 are not orthogonal");
END_IF
END


//FUNCTION dot_product

PROCEDURE dot_product(v1,v2: ARRAY_OF INTEGER) : INTEGER
VAR
    i,dot : INTEGER;
BEGIN
    dot :=0;
    i :=0;
    IF (v1.length <> v2.length) THEN
    Write("Vectors with different sizes we cannot calculate dot product");
    RETURN.NaN ;
END_IF
    WHILE (i < v1.length) DO 
    dot := dot + v1[i]*v2[i];
    END_WHILE
    RETURN.dot;
END


//algorithm
ALGORITHM orth_vectors
VAR
    v1,v2 : ARRAY_OF INTEGER [50];
    dot : INTEGER;
BEGIN
//Read size of element of v1
    n1 := read_size();
//Read elements of v1
    read_array(n1,v1);
//Read size of element of v2
    n2 := read_size();
//Read element of v2
    read_array(n2,v2);
dot:=dot_product (v1,v2);
IF (dot = 0) THEN
Write("v1 and v2 are orthogonal");
ELSE 
Write("v1 and v2 are not orthogonal");
END_IF
END